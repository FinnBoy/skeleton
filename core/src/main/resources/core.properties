# note:

# hibernate #
hibernate.session.save = DefaultSaveEventListener.performSaveOrUpdate -> \
  DefaultSaveOrUpdateEventListener.entityIsTransient -> \
  StatefulPersistenceContext.reassociateProxy(Object value, Serializable id)

hibernate.session.flush = DefaultFlushEventListener.onFlush -> AbstractFlushingEventListener.performExecutions -> \
  ActionQueue.prepareActions & executeActions -> \
  EntityInsertAction.execute() -> SingleTableEntityPersister

hibernate.session.cache = SessionImpl.getEntityUsingInterceptor

# spring #
spring.tx = spring-tx-3.2.xsd, AbstractPlatformTransactionManager, TransactionAspectSupport
spring.session.factory.hibernate = LocalSessionFactoryBean
spring.session.factory.mybatis = SqlSessionFactoryBean
spring.scan.base.package = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider

spring.loading.resource.1 = org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResources -> \
  org.springframework.core.io.support.PathMatchingResourcePatternResolver#findAllClassPathResources -> \
  {classLoader}.getResources(path)

spring.loading.resource.2 = org.springframework.core.io.DefaultResourceLoader#getResource -> \
  case 1: new ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader()); \
  case 2: new UrlResource(url); \
  case 3: new ClassPathContextResource(path, getClassLoader());

spring.loading.resource.type.1 = org.springframework.core.io.UrlResource
spring.loading.resource.type.2 = org.springframework.core.io.ClassPathResource
spring.loading.resource.type.3 = org.springframework.core.io.DefaultResourceLoader.ClassPathContextResource
spring.loading.resource.type.4 = org.springframework.core.io.FileSystemResource

# mybatis #
mybatis.xml.mapper.generator = org.apache.ibatis.builder.xml.XMLMapperBuilder
mybatis.session = SqlSessionTemplate, DefaultSqlSession

mybatis.loading.resource = org.apache.ibatis.io.Resources